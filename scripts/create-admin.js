#!/usr/bin/env node

require('dotenv').config();
const { PrismaClient } = require('@prisma/client');
const UserService = require('../services/UserService');
const AuthUtils = require('../utils/auth');
const readline = require('readline');

const prisma = new PrismaClient();
const userService = new UserService(prisma);

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function askQuestion(question) {
  return new Promise((resolve) => {
    rl.question(question, (answer) => {
      resolve(answer.trim());
    });
  });
}

async function createFirstAdmin() {
  console.log('üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n');

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    const existingUsers = await userService.getAllUsers(true);
    
    if (existingUsers.length > 0) {
      console.log('‚ùå –í —Å–∏—Å—Ç–µ–º–µ —É–∂–µ –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:');
      existingUsers.forEach(user => {
        console.log(`   - ${user.username} (${user.email}) - ${user.role} - ${user.isActive ? '–∞–∫—Ç–∏–≤–µ–Ω' : '–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω'}`);
      });
      console.log('\n–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ API –∏–ª–∏ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å.');
      return;
    }

    let username, email, password;

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    while (!username || username.length < 3) {
      username = await askQuestion('–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞): ');
      if (!username || username.length < 3) {
        console.log('‚ùå –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞');
      }
    }

    while (!email || !AuthUtils.validateEmail(email)) {
      email = await askQuestion('Email: ');
      if (!AuthUtils.validateEmail(email)) {
        console.log('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å');
      }
    }

    while (true) {
      password = await askQuestion('–ü–∞—Ä–æ–ª—å (–º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤, –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã): ');
      const validation = AuthUtils.validatePassword(password);
      if (validation.valid) {
        break;
      } else {
        console.log(`‚ùå ${validation.message}`);
      }
    }

    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await userService.createUser({
      username,
      email,
      password,
      role: 'superadmin'
    });

    console.log('\n‚úÖ –ü–µ—Ä–≤—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!');
    console.log(`   –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.username}`);
    console.log(`   Email: ${user.email}`);
    console.log(`   –†–æ–ª—å: ${user.role}`);
    console.log(`   ID: ${user.id}`);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω
    const token = AuthUtils.generateToken(user);
    console.log('\nüîë JWT —Ç–æ–∫–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API:');
    console.log(token);
    
    console.log('\nüìù –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:');
    console.log(`curl -H "Authorization: Bearer ${token}" "http://localhost:8080/api/v1/auth/me"`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  } finally {
    await prisma.$disconnect();
    rl.close();
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  createFirstAdmin().catch(console.error);
}

module.exports = { createFirstAdmin };